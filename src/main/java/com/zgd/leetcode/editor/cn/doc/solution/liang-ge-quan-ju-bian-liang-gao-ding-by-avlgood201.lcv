### 解题思路

摘抄来自美服的解题思路

### 代码

* java

```java
//    The solution to this problem to compute the value only when requested to.
//    we keep track of the changes using two variables increment and mult
//    so the final calculation will be A[i] * mult +increment
//
//    So what happens if there is a addAll?
//    we just do increment+=val
//
//    What happens on multAll?
//    assume the value before multiplication is org
//            org = A[i] * mult +increment
//    we are multiplying by m, hence it will be
//    org = A[i] * (mult * m) + (increment * m)
//    comparing with our lazy formula, we see that we can just do mult*=m and increment*=m and continue
//
//    What if there is an append?
//    Now we cant just ignore this operation because the new value cannot be subject to the orginal formula.
//    One way to solve it would be to just compute the values at this point and reset increment and mult but this would lead to a TLE.
//    So we need a way to negate the final formula
//    so first we do newval - =increment and then newval/=mult. But as these are in modulo arthematic,
//    the division changes to newval *= moduloInverse(mult)
//
//    How to calculate Modulo Inverse?
//    We know that 10^9+7 is prime and hence we can use Fermat's theorem to calculate inverse
//    a^(m-1) ≡ 1 (mod m)
//    If we multiply both sides with a^(-1), we get
//    a^(-1) ≡ a^(m-2) (mod m)
//    so we just need to calculate modPower(a, m-2)

class Fancy {
    private final int MOD = 1000000007;
    List<Long> seed;
    long globalMultiply;
    long globalIncrement;

    public Fancy() {
        seed = new ArrayList<>();
        globalMultiply = 1;
        globalIncrement = 0;
    }

    // 中途加进来的数，先减去globalIncrement
    // 再除以globalMultiply(根据费马小定理，等价于乘以globalMultiply的MOD-2次方)
    public void append(int val) {
        long toAdd = (val + MOD - globalIncrement) % MOD;
        toAdd = toAdd * modPow(globalMultiply, MOD-2) % MOD;
        seed.add(toAdd);
    }

    public void addAll(int inc) {
        globalIncrement = (globalIncrement + inc) % MOD;
    }

    public void multAll(int m) {
        globalIncrement = (globalIncrement * m) % MOD;
        globalMultiply = (globalMultiply * m) % MOD;
    }

    public int getIndex(int idx) {
        if (idx >= seed.size()) {
            return -1;
        }
        return (int)(seed.get(idx) * globalMultiply % MOD + globalIncrement) % MOD ;
    }

    // x的y次方
    private long modPow(long x, int y) {
        long result = 1;
        long multiply = x;
        while (y > 0) {
            if ((y & 1) > 0) {
                result = (result * multiply) % MOD;
            }
            multiply = (multiply * multiply) % MOD;
            y >>= 1;
        }
        return result;
    }
}

/**
 * Your Fancy object will be instantiated and called as such:
 * Fancy obj = new Fancy();
 * obj.append(val);
 * obj.addAll(inc);
 * obj.multAll(m);
 * int param_4 = obj.getIndex(idx);
 */
```

