### 解题思路

下标i调到下标j， f[i] = f[j] + 1, 在所有的j中得到最大的f[i]， f[i] = max(f[i], f[j] + 1)
有动态规划的思想，我感觉这题更偏向与dfs和记忆化存储。

### 代码

* java

```java
class Solution {
    int n;
    int[] f;
    public int maxJumps(int[] arr, int d) {
        n = arr.length;
        f = new int[n];
        Arrays.fill(f, -1);
        for (int i = 0; i < n; i++){
            f [i] = dfs(arr, i, d);
        }
        int ans = 0;
        for (int i = 0; i < n; i++)
            ans = Math.max(ans, f[i]);
        return ans + 1;

    }
    int dfs(int[] arr, int pos, int d){
        int left = pos - d < 0 ? 0 : pos - d;
        int right = pos + d > n - 1? n - 1 : pos + d;
        int t = pos;
        int ans = 0;
        while (--t >= left && arr[t] < arr[pos]){
            if (f[t] != -1)
                ans = Math.max(f[t] + 1, ans);
            else {
                f[t] = dfs(arr, t, d);
                ans = Math.max(f[t] + 1, ans); 
            }    
        }
        t = pos;
        while (++t <= right && arr[t] < arr[pos]){
            if (f[t] != -1)
                ans = Math.max(f[t] + 1, ans);
            else {
                f[t] = dfs(arr, t, d);
                ans = Math.max(f[t] + 1, ans);
            } 
        }
        return ans;
    }
}
```

