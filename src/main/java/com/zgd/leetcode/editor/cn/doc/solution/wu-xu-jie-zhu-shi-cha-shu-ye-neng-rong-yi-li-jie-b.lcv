### 解题思路：

本题有相当的难度。

#### 难点一，怎么获得数字序列的字典序？

数字全部转成字符串并排序，显然不现实。

数字序列的字典序有一个特点：

**以数字 `i` 开头的所有数字串 按字典序一定 排在以数字 `i+1` 开头的所有数字串的前面。**

对每个数字 `i`，唯一能做的就是确定以数字 `i` 开头的字符串的个数。

但是有一个限制是，以 `i` 开头的数字不能超过最大数字 $n$。

比如 `i=1` 时，以 1 开头的有 1,10,11,12,13,14,15,16,17,18,19。

如 `n=12`，则数字只能是 1，10，11。以 1 开头的数字串共有 3 个。

计算以数字 `i` 开头且不超过最大数字 $n$ 的数字个数，算法命名为 `get_count`
思路如下：

* 

```
count = 0;
数字i;
区间起点a = 数字i;
区间终点b = 数字i+1;
while (a <= n){
    //说明区间没有超过最大数字n
    确定区间[a,min(n+1,b));
    count += 区间中的数字个数;
}
```

`get_count` 的实现代码如下:

* 

```
typedef long long ll;
prefix即为数字i
ll get_count(ll prefix,ll n){
	ll cnt=0;
	for(ll a=prefix,b=prefix+1;a<=n;a*=10,b*=10){
		cnt += min(n+1,b) - a;
	}
	return cnt;
}
```

构成嵌套的数字区间 `[a,b)`，只要 $a$ 不超过 $n$，都计数。

#### 难点二，怎么定位 k 的位置。

要明确一点数字 `i` 是逐步确定的。数字 `i` 从 1 开始。

以数字 `i` 开头的数字串，在 $n$ 个字典序数字串中，一定是排在一起的。这就确定了一个位置区间。

设位置区间的起点为 $p$。从全局看，$p$ 从 1 开始。

那么每次确定数字 `i` 思路为：

* 

```
数字i = 1;
位置p = 1;
while (位置p < 位置k) {
    //还未到第k个元素
    count = get_count(数字i)，以数字i开始的数字个数;
    if (p + count > k){
        说明以数字i开头的数字串太多了，并且第k个数字一定是以数字i开头。
        此时数字i更新为10*i，缩小搜索范围。
        位置p向前移动一位，因为新数字i字典序向后移动一位了。
    }else if(p + count < k){
        说明将以数字i开头的数字串都算进去，也不够。
        说明数字i要增加到i+1。
        同时，位置p要跨过count个数字。
    }
}
此时位置p 一定等于 位置k，此时的数字i即为结果。
```

实现的代码：

* 

```
prefix即为数字i;
typedef long long ll;
int findKthNumber(int n, int k) {
	ll prefix=1;
	ll p=1;
	while(p<k){
		ll cnt=get_count(prefix,n);
		if(p+cnt > k){
			prefix *= 10;            
			p++;
		}
		else if(p+cnt <= k){
			prefix++;
			p += cnt;
		}
	}
	return prefix;
}
```

