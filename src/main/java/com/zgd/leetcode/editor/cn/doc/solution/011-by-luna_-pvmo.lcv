将0视为- 1，遇到1加1，遇到0减1，并用哈希表记录前缀和最小下标，当当前和存在于哈希表中时，说明这一段0和1的个数相同，更新最长连续子数组长度

* []

```c++
class Solution {
public:
    int findMaxLength(vector<int>& nums) {
        int n = nums.size();
        vector<int> preSum(n + 1);
        int ans = 0;
        unordered_map<int, int> hashmap;
        hashmap[0] = 0;                                     //**********
        for(int i = 1; i <= n; i ++)
        {
            int temp = (nums[i - 1] == 0) ? - 1: 1;          //**********
            // int temp;
            // if(nums[i - 1] == 0)
            //     temp = - 1;
            // else    
            //     temp = 1;   
            preSum[i] = preSum[i - 1] + temp;
            if(hashmap.count(preSum[i]))
                ans = max(ans, i - hashmap[preSum[i]]);
            else
                hashmap[preSum[i]] = i;
        }
        return ans;
    }
};
```

* []

```python3
class Solution:
    def findMaxLength(self, nums: List[int]) -> int:
        n = len(nums)
        preSum = [0 for _ in range(n + 1)]
        hashmap = defaultdict()    
        hashmap[0] = 0    
        ans = 0
        for i in range(1, n + 1):
            temp = - 1 if nums[i - 1] == 0 else 1
            preSum[i] = preSum[i - 1] + temp
            if preSum[i] in hashmap:
                ans = max(ans, i - hashmap[preSum[i]])
            else:
                hashmap[preSum[i]] = i
        return ans
```

* []

```java
class Solution {
    public int findMaxLength(int[] nums) {
        int n = nums.length;
        int[] preSum = new int[n + 1];
        int ans = 0;
        Map<Integer, Integer> hashmap = new HashMap<Integer, Integer>();
        hashmap.put(0, 0);
        for(int i = 1; i <= n; i ++)
        {
            int temp = (nums[i - 1] == 0) ? - 1 : 1;
            preSum[i] = preSum[i - 1] + temp;
            if(hashmap.containsKey(preSum[i]))
            {
                ans = Math.max(ans, i - hashmap.get(preSum[i]));
            }
            else
                hashmap.put(preSum[i], i);
        }
        return ans;
    }
}
```

