状态dp[i][j]表示前**i**个字符删除**j**个后的长度
对于要求的dp[i][j]他的大小我们可以对第**i**个字符进行讨论
1. 删除第**i**个字符,dp[i][j]转移为dp[i-1][j-1].
2. 保留第**i**个字符,向前寻找相同的字符,并且认为有个下标为**l**的相同字符,使**l**到**i**连续,为了使**l**到**i**连续需要删除其中del个字符,del<=**j**.
   dp[i][j]为,找出所有符合条件的下标**l**求dp[l-1][j-del]+连续字符的长度 的最小值.

* 

```
class Solution {
    public int getLengthOfOptimalCompression(String s, int k) {
        int n = s.length();
        int[][] dp = new int[n + 1][k + 1];
        for(int[] x:dp){
            Arrays.fill(x,n+1);
        }
        dp[0][0]=0;
        for(int i=1;i<=n;i++){
            for (int j=0;j<=i&&j<=k;j++){
                if(j<k) dp[i][j+1]=Math.min(dp[i-1][j],dp[i][j+1]);
                int del=0;
                for(int l=i;l>0;l--){
                    if(s.charAt(l-1)!=s.charAt(i-1)){
                        if(++del>j){
                            break;
                        }
                    } else {
                        dp[i][j]=Math.min(dp[l-1][j-del]+len(i-l+1-del)+1,dp[i][j]);
                    }
                }
            }
        }
        return dp[n][k];
    }
    public int len(int k){
        if(k <= 1) return 0;
        else if(k > 1 && k < 10) return 1;
        else if(k >= 10 && k < 100) return 2;
        else return 3;
    }
}
```

