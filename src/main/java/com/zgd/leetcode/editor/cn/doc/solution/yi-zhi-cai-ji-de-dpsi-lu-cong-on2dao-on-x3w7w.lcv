### 解题思路

对于每一种 “好序列” 都必定是以 ‘0’ 或 ‘1’ 结尾，如果我们选定结尾的字符为i，那么长度为 n （n>=3） 的好序列种数只能等于长度为 n-1 的好序列种数，并且：
n == 2 时：好序列种数只能为1（在字符i前已经出现'1'） 或 0（因为除零外 不能以零开头 且我们已经选定结尾字符i）
n == 1 时：好序列种数也只能为1（即选定的i一个字符组成）
n <= 0 时：不存在好序列（好序列不能为空）
根据上面的思路，所以我的代码如下：

### 代码

* java

```java
//  一
class Solution {
    public int numberOfUniqueGoodSubsequences(String binary) {
        int MOD = (int)(1e9)+7;
        char[] s = binary.toCharArray();
        int n = s.length;
        int rt =0;

        //dp[i][j]表示以字符 i结尾的 长度为j的 好序列种数
        int dp[][] = new int[2][n+1];
        for(int i = 0; i < n; i++){
         //逆序是为了避免影响下一个长度的值的更新
            // t 表示 i 是 0 还是 1
            int t = s[i]-'0';
            //当 长度j大于等于3时，种数等于所有长度为 j-1 的种数之和 ①
            for(int j = i+1; j > 2; j--){
                dp[t][j] = (dp[t][j-1]+dp[(t+1)%2][j-1])%MOD;
            }
            //参考思路部分
            dp[t][2] = dp[1][1];
            dp[t][1] = 1;
        }
        // 长度 1 到 n的好序列种数和即所求值
        for(int i = 1; i <= n; i++){
            rt = (((dp[0][i] + dp[1][i])%MOD)+rt)%MOD;
        }
        return rt;
    }
}
```

但上面的代码时间复杂度为O(n^2)很明显或超时,仔细观察可以发现①部分操作只是让返回的答案增加值的大小为：
若 i 为 '1' : 长度为2 以上的 以'0'结尾的 好序列种数
若 i 为 '0' : 长度为2 以上的 以'1'结尾的 好序列种数
所以完全可以只用6个变量（i为'0' 3个，i 为'1' 3个）记录 长度为1、2、3及3以上 的好序列种数
代码如下：

* java

```java
class Solution {
    public int numberOfUniqueGoodSubsequences(String binary) {
        int MOD = (int)(1e9)+7;
        int n = binary.length();
        int rt =0;
        int dp[][] = new int[2][4];
        for(int i = 0; i < n; i++){
            int t = binary.charAt(i)-'0';
            dp[t][3] = (((dp[t^1][3]+dp[t][3])%MOD) + (dp[t^1][2]+dp[t][2])%MOD)%MOD;
            dp[t][2] = dp[1][1];
            dp[t][1] = 1;
        }
        for(int i = 1; i < 4; i++){
            rt = (rt + (dp[0][i]+dp[1][i])%MOD)%MOD;
        }
        return rt;
    }
}
```

