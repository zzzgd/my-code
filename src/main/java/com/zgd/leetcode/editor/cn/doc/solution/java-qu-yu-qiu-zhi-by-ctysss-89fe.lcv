邮票宽w, 高h
如果 坐标(i, j) 位置需要被填充, 那么只需要 左上角(i-h+1 , j-w+1) 到自身(i , j), 这个矩形区域内有一个位置可以作为左上角贴邮票就行
所以题目变成了 判断 一个矩形区域内是否有可以被作为左上角贴邮票的点
我们可以根据grid求 前缀和，然后求出i,j位置是否可以作为左上角填充邮票, 进而在求前缀和，判断

* 

```
class Solution {
    public boolean possibleToStamp(int[][] grid, int stampHeight, int stampWidth) {
        int m = grid.length , n = grid[0].length;
        //grid的前缀和
        int[][] sum = new int[m+1][n+1];
        // 坐标i,j是否可以作为左上角贴邮票
        int[][] can = new int[m][n];
        for(int i = 0 ; i < m ; i++){
            for(int j  = 0 ; j < n ; j++){
                sum[i+1][j+1] = sum[i+1][j] + sum[i][j+1] - sum[i][j] +  grid[i][j];
            }
        }
        for(int i = 0 ; i < Math.max(0 , m - stampHeight + 1) ; i++){
            for(int j = 0 ; j < Math.max(0 , n - stampWidth + 1) ; j++){
                int rr = Math.min(m , stampHeight+i);
                int rc = Math.min(n , stampWidth+j);
                if(sum[rr][rc] - sum[rr][j] - sum[i][rc] + sum[i][j] == 0){
                    can[i][j] = 1;
                }
            }
        }

        // 求can的前缀和，用来最后作区域判断
        for(int i = 1 ; i < m ; i++){
            can[i][0] += can[i-1][0];
        }
        for(int j = 1 ; j < n ; j++){
            can[0][j] += can[0][j-1];
        }
        for(int i = 1 ; i < m ; i++){
            for(int j = 1 ; j < n ; j++){
                can[i][j] = can[i][j] + can[i-1][j] + can[i][j-1] - can[i-1][j-1];
            }
        }

        // 根据can的前缀和，判断左上角(i-h+1 , j-w+1) 到自身(i,j)) 是否有位置可以作为左上角贴邮票
        for(int i = 0 ; i < m ; i++){
            for(int j = 0 ; j < n ; j++){
                if(grid[i][j] == 1) continue;
                int lr = Math.max(0 , i - stampHeight+1);
                int lc = Math.max(0 , j - stampWidth+1);
                
                int t = can[i][j];
                if(lr > 0){
                    t -= can[lr-1][j];
                }
                if(lc > 0){
                    t -= can[i][lc-1];
                }
                if(lr > 0 && lc > 0){
                    t += can[lr-1][lc-1];
                }
                if(t == 0) return false;
            }
        }
        return true;
    }
}
```

